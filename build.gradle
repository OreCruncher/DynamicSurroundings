buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.


ext.config = parseConfig(file('build.properties'))

// This gets tagged onto the archive name
version= "${config.version.minecraft}-${config.version.mod.major}.${config.version.mod.minor}.${config.version.mod.revis}.${config.version.mod.patch}"
group= "${config.group}"
archivesBaseName = "${config.archive}"

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "${config.version.minecraft}-${config.version.forge}"
    runDir = "run"
    replace '@VERSION@', "${config.version.mod.major}.${config.version.mod.minor}.${config.version.mod.revis}.${config.version.mod.patch}"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "${config.version.snapshot}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {

    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven/"
    }
    
    maven {
        url "http://dvs1.progwml6.com/files/maven"
    }
    
    maven {
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    
    maven {
        name "Foxiehost"
        url "http://maven.foxiehost.eu"
    }
	
    maven {
    	name "Chisel"
    	url "http://maven.tterrag.com"
    }
    
    maven {
		url 'https://repo.elytradev.com/'
	}
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    compile "com.github.glitchfiend.biomesoplenty:BiomesOPlenty:1.12.2-7.0.1.2325:deobf"
    compile "com.github.glitchfiend.biomesoplenty:ToughAsNails:1.12.2-3.1.0.84:deobf"
    
	// http://dvs1.progwml6.com/files/maven/mezz/jei/
    deobfCompile "mezz.jei:jei_1.12.2:4.8.5.147:api"
    runtime "mezz.jei:jei_1.12.2:4.8.5.147"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    
    manifest {
        	attributes('FMLCorePlugin': 'org.blockartistry.DynSurround.asm.TransformLoader', 'FMLCorePluginContainsFMLMod': 'true', 'FMLAT': 'dsurround_at.cfg')
    }
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
    
    manifest {
        	attributes('FMLCorePlugin': 'org.blockartistry.DynSurround.asm.TransformLoader', 'FMLCorePluginContainsFMLMod': 'true', 'FMLAT': 'dsurround_at.cfg')
    }
}

// https://gist.github.com/matthewprenger/9b2da059b89433a01c1c
task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }

    keyStore = project.keyStore // This needs to be a path to the keystore file
    alias = project.keyStoreAlias
    storePass = project.keyStorePass
    keyPass = project.keyStoreKeyPass
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

signJar.dependsOn build

artifacts {
    archives deobfJar
}
